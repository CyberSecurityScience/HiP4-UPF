// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUESTS_UPFDRIVER_REQUESTS_H_
#define FLATBUFFERS_GENERATED_REQUESTS_UPFDRIVER_REQUESTS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace UPFDriver {
namespace Requests {

struct DL_N6_SimpleInsertRequest;
struct DL_N6_SimpleInsertRequestBuilder;
struct DL_N6_SimpleInsertRequestT;

struct DL_N6_SimpleUpdateRequest;
struct DL_N6_SimpleUpdateRequestBuilder;
struct DL_N6_SimpleUpdateRequestT;

struct DL_N6_SimpleRemoveRequest;
struct DL_N6_SimpleRemoveRequestBuilder;
struct DL_N6_SimpleRemoveRequestT;

struct UL_N6_SimpleInsertRequest;
struct UL_N6_SimpleInsertRequestBuilder;
struct UL_N6_SimpleInsertRequestT;

struct UL_N6_SimpleUpdateRequest;
struct UL_N6_SimpleUpdateRequestBuilder;
struct UL_N6_SimpleUpdateRequestT;

struct UL_N6_SimpleRemoveRequest;
struct UL_N6_SimpleRemoveRequestBuilder;
struct UL_N6_SimpleRemoveRequestT;

struct InsertOrUpdatePerMaidURR;
struct InsertOrUpdatePerMaidURRBuilder;
struct InsertOrUpdatePerMaidURRT;

struct Request;
struct RequestBuilder;
struct RequestT;

struct Transaction;
struct TransactionBuilder;
struct TransactionT;

enum RequestUnion : uint8_t {
  RequestUnion_NONE = 0,
  RequestUnion_DL_N6_SimpleInsertRequest = 1,
  RequestUnion_DL_N6_SimpleUpdateRequest = 2,
  RequestUnion_DL_N6_SimpleRemoveRequest = 3,
  RequestUnion_UL_N6_SimpleInsertRequest = 4,
  RequestUnion_UL_N6_SimpleUpdateRequest = 5,
  RequestUnion_UL_N6_SimpleRemoveRequest = 6,
  RequestUnion_InsertOrUpdatePerMaidURR = 7,
  RequestUnion_MIN = RequestUnion_NONE,
  RequestUnion_MAX = RequestUnion_InsertOrUpdatePerMaidURR
};

inline const RequestUnion (&EnumValuesRequestUnion())[8] {
  static const RequestUnion values[] = {
    RequestUnion_NONE,
    RequestUnion_DL_N6_SimpleInsertRequest,
    RequestUnion_DL_N6_SimpleUpdateRequest,
    RequestUnion_DL_N6_SimpleRemoveRequest,
    RequestUnion_UL_N6_SimpleInsertRequest,
    RequestUnion_UL_N6_SimpleUpdateRequest,
    RequestUnion_UL_N6_SimpleRemoveRequest,
    RequestUnion_InsertOrUpdatePerMaidURR
  };
  return values;
}

inline const char * const *EnumNamesRequestUnion() {
  static const char * const names[9] = {
    "NONE",
    "DL_N6_SimpleInsertRequest",
    "DL_N6_SimpleUpdateRequest",
    "DL_N6_SimpleRemoveRequest",
    "UL_N6_SimpleInsertRequest",
    "UL_N6_SimpleUpdateRequest",
    "UL_N6_SimpleRemoveRequest",
    "InsertOrUpdatePerMaidURR",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestUnion(RequestUnion e) {
  if (::flatbuffers::IsOutRange(e, RequestUnion_NONE, RequestUnion_InsertOrUpdatePerMaidURR)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestUnion()[index];
}

template<typename T> struct RequestUnionTraits {
  static const RequestUnion enum_value = RequestUnion_NONE;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::DL_N6_SimpleInsertRequest> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleInsertRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::DL_N6_SimpleUpdateRequest> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleUpdateRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::DL_N6_SimpleRemoveRequest> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleRemoveRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::UL_N6_SimpleInsertRequest> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleInsertRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::UL_N6_SimpleUpdateRequest> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleUpdateRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::UL_N6_SimpleRemoveRequest> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleRemoveRequest;
};

template<> struct RequestUnionTraits<UPFDriver::Requests::InsertOrUpdatePerMaidURR> {
  static const RequestUnion enum_value = RequestUnion_InsertOrUpdatePerMaidURR;
};

template<typename T> struct RequestUnionUnionTraits {
  static const RequestUnion enum_value = RequestUnion_NONE;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::DL_N6_SimpleInsertRequestT> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleInsertRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::DL_N6_SimpleUpdateRequestT> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleUpdateRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::DL_N6_SimpleRemoveRequestT> {
  static const RequestUnion enum_value = RequestUnion_DL_N6_SimpleRemoveRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::UL_N6_SimpleInsertRequestT> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleInsertRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::UL_N6_SimpleUpdateRequestT> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleUpdateRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::UL_N6_SimpleRemoveRequestT> {
  static const RequestUnion enum_value = RequestUnion_UL_N6_SimpleRemoveRequest;
};

template<> struct RequestUnionUnionTraits<UPFDriver::Requests::InsertOrUpdatePerMaidURRT> {
  static const RequestUnion enum_value = RequestUnion_InsertOrUpdatePerMaidURR;
};

struct RequestUnionUnion {
  RequestUnion type;
  void *value;

  RequestUnionUnion() : type(RequestUnion_NONE), value(nullptr) {}
  RequestUnionUnion(RequestUnionUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(RequestUnion_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  RequestUnionUnion(const RequestUnionUnion &);
  RequestUnionUnion &operator=(const RequestUnionUnion &u)
    { RequestUnionUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  RequestUnionUnion &operator=(RequestUnionUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~RequestUnionUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = RequestUnionUnionTraits<RT>::enum_value;
    if (type != RequestUnion_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, RequestUnion type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  UPFDriver::Requests::DL_N6_SimpleInsertRequestT *AsDL_N6_SimpleInsertRequest() {
    return type == RequestUnion_DL_N6_SimpleInsertRequest ?
      reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleInsertRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::DL_N6_SimpleInsertRequestT *AsDL_N6_SimpleInsertRequest() const {
    return type == RequestUnion_DL_N6_SimpleInsertRequest ?
      reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleInsertRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *AsDL_N6_SimpleUpdateRequest() {
    return type == RequestUnion_DL_N6_SimpleUpdateRequest ?
      reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *AsDL_N6_SimpleUpdateRequest() const {
    return type == RequestUnion_DL_N6_SimpleUpdateRequest ?
      reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *AsDL_N6_SimpleRemoveRequest() {
    return type == RequestUnion_DL_N6_SimpleRemoveRequest ?
      reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *AsDL_N6_SimpleRemoveRequest() const {
    return type == RequestUnion_DL_N6_SimpleRemoveRequest ?
      reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::UL_N6_SimpleInsertRequestT *AsUL_N6_SimpleInsertRequest() {
    return type == RequestUnion_UL_N6_SimpleInsertRequest ?
      reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleInsertRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleInsertRequestT *AsUL_N6_SimpleInsertRequest() const {
    return type == RequestUnion_UL_N6_SimpleInsertRequest ?
      reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleInsertRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *AsUL_N6_SimpleUpdateRequest() {
    return type == RequestUnion_UL_N6_SimpleUpdateRequest ?
      reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *AsUL_N6_SimpleUpdateRequest() const {
    return type == RequestUnion_UL_N6_SimpleUpdateRequest ?
      reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *AsUL_N6_SimpleRemoveRequest() {
    return type == RequestUnion_UL_N6_SimpleRemoveRequest ?
      reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *>(value) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *AsUL_N6_SimpleRemoveRequest() const {
    return type == RequestUnion_UL_N6_SimpleRemoveRequest ?
      reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *>(value) : nullptr;
  }
  UPFDriver::Requests::InsertOrUpdatePerMaidURRT *AsInsertOrUpdatePerMaidURR() {
    return type == RequestUnion_InsertOrUpdatePerMaidURR ?
      reinterpret_cast<UPFDriver::Requests::InsertOrUpdatePerMaidURRT *>(value) : nullptr;
  }
  const UPFDriver::Requests::InsertOrUpdatePerMaidURRT *AsInsertOrUpdatePerMaidURR() const {
    return type == RequestUnion_InsertOrUpdatePerMaidURR ?
      reinterpret_cast<const UPFDriver::Requests::InsertOrUpdatePerMaidURRT *>(value) : nullptr;
  }
};

bool VerifyRequestUnion(::flatbuffers::Verifier &verifier, const void *obj, RequestUnion type);
bool VerifyRequestUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct DL_N6_SimpleInsertRequestT : public ::flatbuffers::NativeTable {
  typedef DL_N6_SimpleInsertRequest TableType;
  uint32_t key_ipv4 = 0;
  uint32_t data_ma_id = 0;
  uint32_t data_teid = 0;
  uint16_t data_qer_id = 0;
};

struct DL_N6_SimpleInsertRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DL_N6_SimpleInsertRequestT NativeTableType;
  typedef DL_N6_SimpleInsertRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_IPV4 = 4,
    VT_DATA_MA_ID = 6,
    VT_DATA_TEID = 8,
    VT_DATA_QER_ID = 10
  };
  uint32_t key_ipv4() const {
    return GetField<uint32_t>(VT_KEY_IPV4, 0);
  }
  uint32_t data_ma_id() const {
    return GetField<uint32_t>(VT_DATA_MA_ID, 0);
  }
  uint32_t data_teid() const {
    return GetField<uint32_t>(VT_DATA_TEID, 0);
  }
  uint16_t data_qer_id() const {
    return GetField<uint16_t>(VT_DATA_QER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_IPV4, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_MA_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_TEID, 4) &&
           VerifyField<uint16_t>(verifier, VT_DATA_QER_ID, 2) &&
           verifier.EndTable();
  }
  DL_N6_SimpleInsertRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DL_N6_SimpleInsertRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleInsertRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DL_N6_SimpleInsertRequestBuilder {
  typedef DL_N6_SimpleInsertRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_ipv4(uint32_t key_ipv4) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleInsertRequest::VT_KEY_IPV4, key_ipv4, 0);
  }
  void add_data_ma_id(uint32_t data_ma_id) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleInsertRequest::VT_DATA_MA_ID, data_ma_id, 0);
  }
  void add_data_teid(uint32_t data_teid) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleInsertRequest::VT_DATA_TEID, data_teid, 0);
  }
  void add_data_qer_id(uint16_t data_qer_id) {
    fbb_.AddElement<uint16_t>(DL_N6_SimpleInsertRequest::VT_DATA_QER_ID, data_qer_id, 0);
  }
  explicit DL_N6_SimpleInsertRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DL_N6_SimpleInsertRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DL_N6_SimpleInsertRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DL_N6_SimpleInsertRequest> CreateDL_N6_SimpleInsertRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_ipv4 = 0,
    uint32_t data_ma_id = 0,
    uint32_t data_teid = 0,
    uint16_t data_qer_id = 0) {
  DL_N6_SimpleInsertRequestBuilder builder_(_fbb);
  builder_.add_data_teid(data_teid);
  builder_.add_data_ma_id(data_ma_id);
  builder_.add_key_ipv4(key_ipv4);
  builder_.add_data_qer_id(data_qer_id);
  return builder_.Finish();
}

::flatbuffers::Offset<DL_N6_SimpleInsertRequest> CreateDL_N6_SimpleInsertRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DL_N6_SimpleUpdateRequestT : public ::flatbuffers::NativeTable {
  typedef DL_N6_SimpleUpdateRequest TableType;
  uint32_t key_ipv4 = 0;
  uint32_t data_ma_id = 0;
  uint32_t data_old_ma_id = 0;
  uint32_t data_teid = 0;
  uint16_t data_qer_id = 0;
};

struct DL_N6_SimpleUpdateRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DL_N6_SimpleUpdateRequestT NativeTableType;
  typedef DL_N6_SimpleUpdateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_IPV4 = 4,
    VT_DATA_MA_ID = 6,
    VT_DATA_OLD_MA_ID = 8,
    VT_DATA_TEID = 10,
    VT_DATA_QER_ID = 12
  };
  uint32_t key_ipv4() const {
    return GetField<uint32_t>(VT_KEY_IPV4, 0);
  }
  uint32_t data_ma_id() const {
    return GetField<uint32_t>(VT_DATA_MA_ID, 0);
  }
  uint32_t data_old_ma_id() const {
    return GetField<uint32_t>(VT_DATA_OLD_MA_ID, 0);
  }
  uint32_t data_teid() const {
    return GetField<uint32_t>(VT_DATA_TEID, 0);
  }
  uint16_t data_qer_id() const {
    return GetField<uint16_t>(VT_DATA_QER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_IPV4, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_MA_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_OLD_MA_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_TEID, 4) &&
           VerifyField<uint16_t>(verifier, VT_DATA_QER_ID, 2) &&
           verifier.EndTable();
  }
  DL_N6_SimpleUpdateRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleUpdateRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DL_N6_SimpleUpdateRequestBuilder {
  typedef DL_N6_SimpleUpdateRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_ipv4(uint32_t key_ipv4) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleUpdateRequest::VT_KEY_IPV4, key_ipv4, 0);
  }
  void add_data_ma_id(uint32_t data_ma_id) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleUpdateRequest::VT_DATA_MA_ID, data_ma_id, 0);
  }
  void add_data_old_ma_id(uint32_t data_old_ma_id) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleUpdateRequest::VT_DATA_OLD_MA_ID, data_old_ma_id, 0);
  }
  void add_data_teid(uint32_t data_teid) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleUpdateRequest::VT_DATA_TEID, data_teid, 0);
  }
  void add_data_qer_id(uint16_t data_qer_id) {
    fbb_.AddElement<uint16_t>(DL_N6_SimpleUpdateRequest::VT_DATA_QER_ID, data_qer_id, 0);
  }
  explicit DL_N6_SimpleUpdateRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> CreateDL_N6_SimpleUpdateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_ipv4 = 0,
    uint32_t data_ma_id = 0,
    uint32_t data_old_ma_id = 0,
    uint32_t data_teid = 0,
    uint16_t data_qer_id = 0) {
  DL_N6_SimpleUpdateRequestBuilder builder_(_fbb);
  builder_.add_data_teid(data_teid);
  builder_.add_data_old_ma_id(data_old_ma_id);
  builder_.add_data_ma_id(data_ma_id);
  builder_.add_key_ipv4(key_ipv4);
  builder_.add_data_qer_id(data_qer_id);
  return builder_.Finish();
}

::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> CreateDL_N6_SimpleUpdateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DL_N6_SimpleRemoveRequestT : public ::flatbuffers::NativeTable {
  typedef DL_N6_SimpleRemoveRequest TableType;
  uint32_t key_ipv4 = 0;
  uint32_t data_old_ma_id = 0;
};

struct DL_N6_SimpleRemoveRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DL_N6_SimpleRemoveRequestT NativeTableType;
  typedef DL_N6_SimpleRemoveRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_IPV4 = 4,
    VT_DATA_OLD_MA_ID = 6
  };
  uint32_t key_ipv4() const {
    return GetField<uint32_t>(VT_KEY_IPV4, 0);
  }
  uint32_t data_old_ma_id() const {
    return GetField<uint32_t>(VT_DATA_OLD_MA_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_IPV4, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_OLD_MA_ID, 4) &&
           verifier.EndTable();
  }
  DL_N6_SimpleRemoveRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleRemoveRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DL_N6_SimpleRemoveRequestBuilder {
  typedef DL_N6_SimpleRemoveRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_ipv4(uint32_t key_ipv4) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleRemoveRequest::VT_KEY_IPV4, key_ipv4, 0);
  }
  void add_data_old_ma_id(uint32_t data_old_ma_id) {
    fbb_.AddElement<uint32_t>(DL_N6_SimpleRemoveRequest::VT_DATA_OLD_MA_ID, data_old_ma_id, 0);
  }
  explicit DL_N6_SimpleRemoveRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> CreateDL_N6_SimpleRemoveRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_ipv4 = 0,
    uint32_t data_old_ma_id = 0) {
  DL_N6_SimpleRemoveRequestBuilder builder_(_fbb);
  builder_.add_data_old_ma_id(data_old_ma_id);
  builder_.add_key_ipv4(key_ipv4);
  return builder_.Finish();
}

::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> CreateDL_N6_SimpleRemoveRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UL_N6_SimpleInsertRequestT : public ::flatbuffers::NativeTable {
  typedef UL_N6_SimpleInsertRequest TableType;
  uint32_t key_teid = 0;
  uint8_t key_qfi = 0;
  uint32_t data_ma_id = 0;
  uint16_t data_qer_id = 0;
};

struct UL_N6_SimpleInsertRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UL_N6_SimpleInsertRequestT NativeTableType;
  typedef UL_N6_SimpleInsertRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_TEID = 4,
    VT_KEY_QFI = 6,
    VT_DATA_MA_ID = 8,
    VT_DATA_QER_ID = 10
  };
  uint32_t key_teid() const {
    return GetField<uint32_t>(VT_KEY_TEID, 0);
  }
  uint8_t key_qfi() const {
    return GetField<uint8_t>(VT_KEY_QFI, 0);
  }
  uint32_t data_ma_id() const {
    return GetField<uint32_t>(VT_DATA_MA_ID, 0);
  }
  uint16_t data_qer_id() const {
    return GetField<uint16_t>(VT_DATA_QER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_TEID, 4) &&
           VerifyField<uint8_t>(verifier, VT_KEY_QFI, 1) &&
           VerifyField<uint32_t>(verifier, VT_DATA_MA_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_DATA_QER_ID, 2) &&
           verifier.EndTable();
  }
  UL_N6_SimpleInsertRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UL_N6_SimpleInsertRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleInsertRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UL_N6_SimpleInsertRequestBuilder {
  typedef UL_N6_SimpleInsertRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_teid(uint32_t key_teid) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleInsertRequest::VT_KEY_TEID, key_teid, 0);
  }
  void add_key_qfi(uint8_t key_qfi) {
    fbb_.AddElement<uint8_t>(UL_N6_SimpleInsertRequest::VT_KEY_QFI, key_qfi, 0);
  }
  void add_data_ma_id(uint32_t data_ma_id) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleInsertRequest::VT_DATA_MA_ID, data_ma_id, 0);
  }
  void add_data_qer_id(uint16_t data_qer_id) {
    fbb_.AddElement<uint16_t>(UL_N6_SimpleInsertRequest::VT_DATA_QER_ID, data_qer_id, 0);
  }
  explicit UL_N6_SimpleInsertRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UL_N6_SimpleInsertRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UL_N6_SimpleInsertRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UL_N6_SimpleInsertRequest> CreateUL_N6_SimpleInsertRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_teid = 0,
    uint8_t key_qfi = 0,
    uint32_t data_ma_id = 0,
    uint16_t data_qer_id = 0) {
  UL_N6_SimpleInsertRequestBuilder builder_(_fbb);
  builder_.add_data_ma_id(data_ma_id);
  builder_.add_key_teid(key_teid);
  builder_.add_data_qer_id(data_qer_id);
  builder_.add_key_qfi(key_qfi);
  return builder_.Finish();
}

::flatbuffers::Offset<UL_N6_SimpleInsertRequest> CreateUL_N6_SimpleInsertRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UL_N6_SimpleUpdateRequestT : public ::flatbuffers::NativeTable {
  typedef UL_N6_SimpleUpdateRequest TableType;
  uint32_t key_teid = 0;
  uint8_t key_qfi = 0;
  uint32_t data_ma_id = 0;
  uint32_t data_old_ma_id = 0;
  uint16_t data_qer_id = 0;
};

struct UL_N6_SimpleUpdateRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UL_N6_SimpleUpdateRequestT NativeTableType;
  typedef UL_N6_SimpleUpdateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_TEID = 4,
    VT_KEY_QFI = 6,
    VT_DATA_MA_ID = 8,
    VT_DATA_OLD_MA_ID = 10,
    VT_DATA_QER_ID = 12
  };
  uint32_t key_teid() const {
    return GetField<uint32_t>(VT_KEY_TEID, 0);
  }
  uint8_t key_qfi() const {
    return GetField<uint8_t>(VT_KEY_QFI, 0);
  }
  uint32_t data_ma_id() const {
    return GetField<uint32_t>(VT_DATA_MA_ID, 0);
  }
  uint32_t data_old_ma_id() const {
    return GetField<uint32_t>(VT_DATA_OLD_MA_ID, 0);
  }
  uint16_t data_qer_id() const {
    return GetField<uint16_t>(VT_DATA_QER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_TEID, 4) &&
           VerifyField<uint8_t>(verifier, VT_KEY_QFI, 1) &&
           VerifyField<uint32_t>(verifier, VT_DATA_MA_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DATA_OLD_MA_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_DATA_QER_ID, 2) &&
           verifier.EndTable();
  }
  UL_N6_SimpleUpdateRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleUpdateRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UL_N6_SimpleUpdateRequestBuilder {
  typedef UL_N6_SimpleUpdateRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_teid(uint32_t key_teid) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleUpdateRequest::VT_KEY_TEID, key_teid, 0);
  }
  void add_key_qfi(uint8_t key_qfi) {
    fbb_.AddElement<uint8_t>(UL_N6_SimpleUpdateRequest::VT_KEY_QFI, key_qfi, 0);
  }
  void add_data_ma_id(uint32_t data_ma_id) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleUpdateRequest::VT_DATA_MA_ID, data_ma_id, 0);
  }
  void add_data_old_ma_id(uint32_t data_old_ma_id) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleUpdateRequest::VT_DATA_OLD_MA_ID, data_old_ma_id, 0);
  }
  void add_data_qer_id(uint16_t data_qer_id) {
    fbb_.AddElement<uint16_t>(UL_N6_SimpleUpdateRequest::VT_DATA_QER_ID, data_qer_id, 0);
  }
  explicit UL_N6_SimpleUpdateRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> CreateUL_N6_SimpleUpdateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_teid = 0,
    uint8_t key_qfi = 0,
    uint32_t data_ma_id = 0,
    uint32_t data_old_ma_id = 0,
    uint16_t data_qer_id = 0) {
  UL_N6_SimpleUpdateRequestBuilder builder_(_fbb);
  builder_.add_data_old_ma_id(data_old_ma_id);
  builder_.add_data_ma_id(data_ma_id);
  builder_.add_key_teid(key_teid);
  builder_.add_data_qer_id(data_qer_id);
  builder_.add_key_qfi(key_qfi);
  return builder_.Finish();
}

::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> CreateUL_N6_SimpleUpdateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UL_N6_SimpleRemoveRequestT : public ::flatbuffers::NativeTable {
  typedef UL_N6_SimpleRemoveRequest TableType;
  uint32_t key_teid = 0;
  uint8_t key_qfi = 0;
  uint32_t data_old_ma_id = 0;
};

struct UL_N6_SimpleRemoveRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UL_N6_SimpleRemoveRequestT NativeTableType;
  typedef UL_N6_SimpleRemoveRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_TEID = 4,
    VT_KEY_QFI = 6,
    VT_DATA_OLD_MA_ID = 8
  };
  uint32_t key_teid() const {
    return GetField<uint32_t>(VT_KEY_TEID, 0);
  }
  uint8_t key_qfi() const {
    return GetField<uint8_t>(VT_KEY_QFI, 0);
  }
  uint32_t data_old_ma_id() const {
    return GetField<uint32_t>(VT_DATA_OLD_MA_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY_TEID, 4) &&
           VerifyField<uint8_t>(verifier, VT_KEY_QFI, 1) &&
           VerifyField<uint32_t>(verifier, VT_DATA_OLD_MA_ID, 4) &&
           verifier.EndTable();
  }
  UL_N6_SimpleRemoveRequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleRemoveRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UL_N6_SimpleRemoveRequestBuilder {
  typedef UL_N6_SimpleRemoveRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key_teid(uint32_t key_teid) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleRemoveRequest::VT_KEY_TEID, key_teid, 0);
  }
  void add_key_qfi(uint8_t key_qfi) {
    fbb_.AddElement<uint8_t>(UL_N6_SimpleRemoveRequest::VT_KEY_QFI, key_qfi, 0);
  }
  void add_data_old_ma_id(uint32_t data_old_ma_id) {
    fbb_.AddElement<uint32_t>(UL_N6_SimpleRemoveRequest::VT_DATA_OLD_MA_ID, data_old_ma_id, 0);
  }
  explicit UL_N6_SimpleRemoveRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> CreateUL_N6_SimpleRemoveRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key_teid = 0,
    uint8_t key_qfi = 0,
    uint32_t data_old_ma_id = 0) {
  UL_N6_SimpleRemoveRequestBuilder builder_(_fbb);
  builder_.add_data_old_ma_id(data_old_ma_id);
  builder_.add_key_teid(key_teid);
  builder_.add_key_qfi(key_qfi);
  return builder_.Finish();
}

::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> CreateUL_N6_SimpleRemoveRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct InsertOrUpdatePerMaidURRT : public ::flatbuffers::NativeTable {
  typedef InsertOrUpdatePerMaidURR TableType;
  uint32_t ma_id = 0;
  uint64_t vol_thres = 0;
  uint32_t vol_thres_id = 0;
  uint64_t time_thres = 0;
  uint64_t period_val = 0;
  uint8_t flags = 0;
};

struct InsertOrUpdatePerMaidURR FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InsertOrUpdatePerMaidURRT NativeTableType;
  typedef InsertOrUpdatePerMaidURRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MA_ID = 4,
    VT_VOL_THRES = 6,
    VT_VOL_THRES_ID = 8,
    VT_TIME_THRES = 10,
    VT_PERIOD_VAL = 12,
    VT_FLAGS = 14
  };
  uint32_t ma_id() const {
    return GetField<uint32_t>(VT_MA_ID, 0);
  }
  uint64_t vol_thres() const {
    return GetField<uint64_t>(VT_VOL_THRES, 0);
  }
  uint32_t vol_thres_id() const {
    return GetField<uint32_t>(VT_VOL_THRES_ID, 0);
  }
  uint64_t time_thres() const {
    return GetField<uint64_t>(VT_TIME_THRES, 0);
  }
  uint64_t period_val() const {
    return GetField<uint64_t>(VT_PERIOD_VAL, 0);
  }
  uint8_t flags() const {
    return GetField<uint8_t>(VT_FLAGS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MA_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_VOL_THRES, 8) &&
           VerifyField<uint32_t>(verifier, VT_VOL_THRES_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIME_THRES, 8) &&
           VerifyField<uint64_t>(verifier, VT_PERIOD_VAL, 8) &&
           VerifyField<uint8_t>(verifier, VT_FLAGS, 1) &&
           verifier.EndTable();
  }
  InsertOrUpdatePerMaidURRT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InsertOrUpdatePerMaidURRT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InsertOrUpdatePerMaidURR> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InsertOrUpdatePerMaidURRT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InsertOrUpdatePerMaidURRBuilder {
  typedef InsertOrUpdatePerMaidURR Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ma_id(uint32_t ma_id) {
    fbb_.AddElement<uint32_t>(InsertOrUpdatePerMaidURR::VT_MA_ID, ma_id, 0);
  }
  void add_vol_thres(uint64_t vol_thres) {
    fbb_.AddElement<uint64_t>(InsertOrUpdatePerMaidURR::VT_VOL_THRES, vol_thres, 0);
  }
  void add_vol_thres_id(uint32_t vol_thres_id) {
    fbb_.AddElement<uint32_t>(InsertOrUpdatePerMaidURR::VT_VOL_THRES_ID, vol_thres_id, 0);
  }
  void add_time_thres(uint64_t time_thres) {
    fbb_.AddElement<uint64_t>(InsertOrUpdatePerMaidURR::VT_TIME_THRES, time_thres, 0);
  }
  void add_period_val(uint64_t period_val) {
    fbb_.AddElement<uint64_t>(InsertOrUpdatePerMaidURR::VT_PERIOD_VAL, period_val, 0);
  }
  void add_flags(uint8_t flags) {
    fbb_.AddElement<uint8_t>(InsertOrUpdatePerMaidURR::VT_FLAGS, flags, 0);
  }
  explicit InsertOrUpdatePerMaidURRBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InsertOrUpdatePerMaidURR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InsertOrUpdatePerMaidURR>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InsertOrUpdatePerMaidURR> CreateInsertOrUpdatePerMaidURR(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ma_id = 0,
    uint64_t vol_thres = 0,
    uint32_t vol_thres_id = 0,
    uint64_t time_thres = 0,
    uint64_t period_val = 0,
    uint8_t flags = 0) {
  InsertOrUpdatePerMaidURRBuilder builder_(_fbb);
  builder_.add_period_val(period_val);
  builder_.add_time_thres(time_thres);
  builder_.add_vol_thres(vol_thres);
  builder_.add_vol_thres_id(vol_thres_id);
  builder_.add_ma_id(ma_id);
  builder_.add_flags(flags);
  return builder_.Finish();
}

::flatbuffers::Offset<InsertOrUpdatePerMaidURR> CreateInsertOrUpdatePerMaidURR(::flatbuffers::FlatBufferBuilder &_fbb, const InsertOrUpdatePerMaidURRT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RequestT : public ::flatbuffers::NativeTable {
  typedef Request TableType;
  UPFDriver::Requests::RequestUnionUnion request{};
};

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestT NativeTableType;
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6
  };
  UPFDriver::Requests::RequestUnion request_type() const {
    return static_cast<UPFDriver::Requests::RequestUnion>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  template<typename T> const T *request_as() const;
  const UPFDriver::Requests::DL_N6_SimpleInsertRequest *request_as_DL_N6_SimpleInsertRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_DL_N6_SimpleInsertRequest ? static_cast<const UPFDriver::Requests::DL_N6_SimpleInsertRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::DL_N6_SimpleUpdateRequest *request_as_DL_N6_SimpleUpdateRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_DL_N6_SimpleUpdateRequest ? static_cast<const UPFDriver::Requests::DL_N6_SimpleUpdateRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::DL_N6_SimpleRemoveRequest *request_as_DL_N6_SimpleRemoveRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_DL_N6_SimpleRemoveRequest ? static_cast<const UPFDriver::Requests::DL_N6_SimpleRemoveRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleInsertRequest *request_as_UL_N6_SimpleInsertRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_UL_N6_SimpleInsertRequest ? static_cast<const UPFDriver::Requests::UL_N6_SimpleInsertRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleUpdateRequest *request_as_UL_N6_SimpleUpdateRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_UL_N6_SimpleUpdateRequest ? static_cast<const UPFDriver::Requests::UL_N6_SimpleUpdateRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::UL_N6_SimpleRemoveRequest *request_as_UL_N6_SimpleRemoveRequest() const {
    return request_type() == UPFDriver::Requests::RequestUnion_UL_N6_SimpleRemoveRequest ? static_cast<const UPFDriver::Requests::UL_N6_SimpleRemoveRequest *>(request()) : nullptr;
  }
  const UPFDriver::Requests::InsertOrUpdatePerMaidURR *request_as_InsertOrUpdatePerMaidURR() const {
    return request_type() == UPFDriver::Requests::RequestUnion_InsertOrUpdatePerMaidURR ? static_cast<const UPFDriver::Requests::InsertOrUpdatePerMaidURR *>(request()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE, 1) &&
           VerifyOffset(verifier, VT_REQUEST) &&
           VerifyRequestUnion(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
  RequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Request> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const UPFDriver::Requests::DL_N6_SimpleInsertRequest *Request::request_as<UPFDriver::Requests::DL_N6_SimpleInsertRequest>() const {
  return request_as_DL_N6_SimpleInsertRequest();
}

template<> inline const UPFDriver::Requests::DL_N6_SimpleUpdateRequest *Request::request_as<UPFDriver::Requests::DL_N6_SimpleUpdateRequest>() const {
  return request_as_DL_N6_SimpleUpdateRequest();
}

template<> inline const UPFDriver::Requests::DL_N6_SimpleRemoveRequest *Request::request_as<UPFDriver::Requests::DL_N6_SimpleRemoveRequest>() const {
  return request_as_DL_N6_SimpleRemoveRequest();
}

template<> inline const UPFDriver::Requests::UL_N6_SimpleInsertRequest *Request::request_as<UPFDriver::Requests::UL_N6_SimpleInsertRequest>() const {
  return request_as_UL_N6_SimpleInsertRequest();
}

template<> inline const UPFDriver::Requests::UL_N6_SimpleUpdateRequest *Request::request_as<UPFDriver::Requests::UL_N6_SimpleUpdateRequest>() const {
  return request_as_UL_N6_SimpleUpdateRequest();
}

template<> inline const UPFDriver::Requests::UL_N6_SimpleRemoveRequest *Request::request_as<UPFDriver::Requests::UL_N6_SimpleRemoveRequest>() const {
  return request_as_UL_N6_SimpleRemoveRequest();
}

template<> inline const UPFDriver::Requests::InsertOrUpdatePerMaidURR *Request::request_as<UPFDriver::Requests::InsertOrUpdatePerMaidURR>() const {
  return request_as_InsertOrUpdatePerMaidURR();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(UPFDriver::Requests::RequestUnion request_type) {
    fbb_.AddElement<uint8_t>(Request::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(::flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Request::VT_REQUEST, request);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    UPFDriver::Requests::RequestUnion request_type = UPFDriver::Requests::RequestUnion_NONE,
    ::flatbuffers::Offset<void> request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TransactionT : public ::flatbuffers::NativeTable {
  typedef Transaction TableType;
  uint32_t transaction_id = 0;
  uint64_t deadline = 0;
  std::vector<std::unique_ptr<UPFDriver::Requests::RequestT>> ops{};
  TransactionT() = default;
  TransactionT(const TransactionT &o);
  TransactionT(TransactionT&&) FLATBUFFERS_NOEXCEPT = default;
  TransactionT &operator=(TransactionT o) FLATBUFFERS_NOEXCEPT;
};

struct Transaction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransactionT NativeTableType;
  typedef TransactionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSACTION_ID = 4,
    VT_DEADLINE = 6,
    VT_OPS = 8
  };
  uint32_t transaction_id() const {
    return GetField<uint32_t>(VT_TRANSACTION_ID, 0);
  }
  uint64_t deadline() const {
    return GetField<uint64_t>(VT_DEADLINE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<UPFDriver::Requests::Request>> *ops() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<UPFDriver::Requests::Request>> *>(VT_OPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TRANSACTION_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_DEADLINE, 8) &&
           VerifyOffset(verifier, VT_OPS) &&
           verifier.VerifyVector(ops()) &&
           verifier.VerifyVectorOfTables(ops()) &&
           verifier.EndTable();
  }
  TransactionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TransactionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Transaction> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TransactionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TransactionBuilder {
  typedef Transaction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_transaction_id(uint32_t transaction_id) {
    fbb_.AddElement<uint32_t>(Transaction::VT_TRANSACTION_ID, transaction_id, 0);
  }
  void add_deadline(uint64_t deadline) {
    fbb_.AddElement<uint64_t>(Transaction::VT_DEADLINE, deadline, 0);
  }
  void add_ops(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<UPFDriver::Requests::Request>>> ops) {
    fbb_.AddOffset(Transaction::VT_OPS, ops);
  }
  explicit TransactionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transaction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transaction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transaction> CreateTransaction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t transaction_id = 0,
    uint64_t deadline = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<UPFDriver::Requests::Request>>> ops = 0) {
  TransactionBuilder builder_(_fbb);
  builder_.add_deadline(deadline);
  builder_.add_ops(ops);
  builder_.add_transaction_id(transaction_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transaction> CreateTransactionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t transaction_id = 0,
    uint64_t deadline = 0,
    const std::vector<::flatbuffers::Offset<UPFDriver::Requests::Request>> *ops = nullptr) {
  auto ops__ = ops ? _fbb.CreateVector<::flatbuffers::Offset<UPFDriver::Requests::Request>>(*ops) : 0;
  return UPFDriver::Requests::CreateTransaction(
      _fbb,
      transaction_id,
      deadline,
      ops__);
}

::flatbuffers::Offset<Transaction> CreateTransaction(::flatbuffers::FlatBufferBuilder &_fbb, const TransactionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DL_N6_SimpleInsertRequestT *DL_N6_SimpleInsertRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DL_N6_SimpleInsertRequestT>(new DL_N6_SimpleInsertRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DL_N6_SimpleInsertRequest::UnPackTo(DL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_ipv4(); _o->key_ipv4 = _e; }
  { auto _e = data_ma_id(); _o->data_ma_id = _e; }
  { auto _e = data_teid(); _o->data_teid = _e; }
  { auto _e = data_qer_id(); _o->data_qer_id = _e; }
}

inline ::flatbuffers::Offset<DL_N6_SimpleInsertRequest> DL_N6_SimpleInsertRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleInsertRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDL_N6_SimpleInsertRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DL_N6_SimpleInsertRequest> CreateDL_N6_SimpleInsertRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DL_N6_SimpleInsertRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_ipv4 = _o->key_ipv4;
  auto _data_ma_id = _o->data_ma_id;
  auto _data_teid = _o->data_teid;
  auto _data_qer_id = _o->data_qer_id;
  return UPFDriver::Requests::CreateDL_N6_SimpleInsertRequest(
      _fbb,
      _key_ipv4,
      _data_ma_id,
      _data_teid,
      _data_qer_id);
}

inline DL_N6_SimpleUpdateRequestT *DL_N6_SimpleUpdateRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DL_N6_SimpleUpdateRequestT>(new DL_N6_SimpleUpdateRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DL_N6_SimpleUpdateRequest::UnPackTo(DL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_ipv4(); _o->key_ipv4 = _e; }
  { auto _e = data_ma_id(); _o->data_ma_id = _e; }
  { auto _e = data_old_ma_id(); _o->data_old_ma_id = _e; }
  { auto _e = data_teid(); _o->data_teid = _e; }
  { auto _e = data_qer_id(); _o->data_qer_id = _e; }
}

inline ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> DL_N6_SimpleUpdateRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleUpdateRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDL_N6_SimpleUpdateRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DL_N6_SimpleUpdateRequest> CreateDL_N6_SimpleUpdateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DL_N6_SimpleUpdateRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_ipv4 = _o->key_ipv4;
  auto _data_ma_id = _o->data_ma_id;
  auto _data_old_ma_id = _o->data_old_ma_id;
  auto _data_teid = _o->data_teid;
  auto _data_qer_id = _o->data_qer_id;
  return UPFDriver::Requests::CreateDL_N6_SimpleUpdateRequest(
      _fbb,
      _key_ipv4,
      _data_ma_id,
      _data_old_ma_id,
      _data_teid,
      _data_qer_id);
}

inline DL_N6_SimpleRemoveRequestT *DL_N6_SimpleRemoveRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DL_N6_SimpleRemoveRequestT>(new DL_N6_SimpleRemoveRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DL_N6_SimpleRemoveRequest::UnPackTo(DL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_ipv4(); _o->key_ipv4 = _e; }
  { auto _e = data_old_ma_id(); _o->data_old_ma_id = _e; }
}

inline ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> DL_N6_SimpleRemoveRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleRemoveRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDL_N6_SimpleRemoveRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DL_N6_SimpleRemoveRequest> CreateDL_N6_SimpleRemoveRequest(::flatbuffers::FlatBufferBuilder &_fbb, const DL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DL_N6_SimpleRemoveRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_ipv4 = _o->key_ipv4;
  auto _data_old_ma_id = _o->data_old_ma_id;
  return UPFDriver::Requests::CreateDL_N6_SimpleRemoveRequest(
      _fbb,
      _key_ipv4,
      _data_old_ma_id);
}

inline UL_N6_SimpleInsertRequestT *UL_N6_SimpleInsertRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UL_N6_SimpleInsertRequestT>(new UL_N6_SimpleInsertRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UL_N6_SimpleInsertRequest::UnPackTo(UL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_teid(); _o->key_teid = _e; }
  { auto _e = key_qfi(); _o->key_qfi = _e; }
  { auto _e = data_ma_id(); _o->data_ma_id = _e; }
  { auto _e = data_qer_id(); _o->data_qer_id = _e; }
}

inline ::flatbuffers::Offset<UL_N6_SimpleInsertRequest> UL_N6_SimpleInsertRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleInsertRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUL_N6_SimpleInsertRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UL_N6_SimpleInsertRequest> CreateUL_N6_SimpleInsertRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleInsertRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UL_N6_SimpleInsertRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_teid = _o->key_teid;
  auto _key_qfi = _o->key_qfi;
  auto _data_ma_id = _o->data_ma_id;
  auto _data_qer_id = _o->data_qer_id;
  return UPFDriver::Requests::CreateUL_N6_SimpleInsertRequest(
      _fbb,
      _key_teid,
      _key_qfi,
      _data_ma_id,
      _data_qer_id);
}

inline UL_N6_SimpleUpdateRequestT *UL_N6_SimpleUpdateRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UL_N6_SimpleUpdateRequestT>(new UL_N6_SimpleUpdateRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UL_N6_SimpleUpdateRequest::UnPackTo(UL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_teid(); _o->key_teid = _e; }
  { auto _e = key_qfi(); _o->key_qfi = _e; }
  { auto _e = data_ma_id(); _o->data_ma_id = _e; }
  { auto _e = data_old_ma_id(); _o->data_old_ma_id = _e; }
  { auto _e = data_qer_id(); _o->data_qer_id = _e; }
}

inline ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> UL_N6_SimpleUpdateRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleUpdateRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUL_N6_SimpleUpdateRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UL_N6_SimpleUpdateRequest> CreateUL_N6_SimpleUpdateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleUpdateRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UL_N6_SimpleUpdateRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_teid = _o->key_teid;
  auto _key_qfi = _o->key_qfi;
  auto _data_ma_id = _o->data_ma_id;
  auto _data_old_ma_id = _o->data_old_ma_id;
  auto _data_qer_id = _o->data_qer_id;
  return UPFDriver::Requests::CreateUL_N6_SimpleUpdateRequest(
      _fbb,
      _key_teid,
      _key_qfi,
      _data_ma_id,
      _data_old_ma_id,
      _data_qer_id);
}

inline UL_N6_SimpleRemoveRequestT *UL_N6_SimpleRemoveRequest::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UL_N6_SimpleRemoveRequestT>(new UL_N6_SimpleRemoveRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UL_N6_SimpleRemoveRequest::UnPackTo(UL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key_teid(); _o->key_teid = _e; }
  { auto _e = key_qfi(); _o->key_qfi = _e; }
  { auto _e = data_old_ma_id(); _o->data_old_ma_id = _e; }
}

inline ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> UL_N6_SimpleRemoveRequest::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleRemoveRequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUL_N6_SimpleRemoveRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UL_N6_SimpleRemoveRequest> CreateUL_N6_SimpleRemoveRequest(::flatbuffers::FlatBufferBuilder &_fbb, const UL_N6_SimpleRemoveRequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UL_N6_SimpleRemoveRequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key_teid = _o->key_teid;
  auto _key_qfi = _o->key_qfi;
  auto _data_old_ma_id = _o->data_old_ma_id;
  return UPFDriver::Requests::CreateUL_N6_SimpleRemoveRequest(
      _fbb,
      _key_teid,
      _key_qfi,
      _data_old_ma_id);
}

inline InsertOrUpdatePerMaidURRT *InsertOrUpdatePerMaidURR::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InsertOrUpdatePerMaidURRT>(new InsertOrUpdatePerMaidURRT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InsertOrUpdatePerMaidURR::UnPackTo(InsertOrUpdatePerMaidURRT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = ma_id(); _o->ma_id = _e; }
  { auto _e = vol_thres(); _o->vol_thres = _e; }
  { auto _e = vol_thres_id(); _o->vol_thres_id = _e; }
  { auto _e = time_thres(); _o->time_thres = _e; }
  { auto _e = period_val(); _o->period_val = _e; }
  { auto _e = flags(); _o->flags = _e; }
}

inline ::flatbuffers::Offset<InsertOrUpdatePerMaidURR> InsertOrUpdatePerMaidURR::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InsertOrUpdatePerMaidURRT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInsertOrUpdatePerMaidURR(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InsertOrUpdatePerMaidURR> CreateInsertOrUpdatePerMaidURR(::flatbuffers::FlatBufferBuilder &_fbb, const InsertOrUpdatePerMaidURRT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InsertOrUpdatePerMaidURRT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _ma_id = _o->ma_id;
  auto _vol_thres = _o->vol_thres;
  auto _vol_thres_id = _o->vol_thres_id;
  auto _time_thres = _o->time_thres;
  auto _period_val = _o->period_val;
  auto _flags = _o->flags;
  return UPFDriver::Requests::CreateInsertOrUpdatePerMaidURR(
      _fbb,
      _ma_id,
      _vol_thres,
      _vol_thres_id,
      _time_thres,
      _period_val,
      _flags);
}

inline RequestT *Request::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RequestT>(new RequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Request::UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = request_type(); _o->request.type = _e; }
  { auto _e = request(); if (_e) _o->request.value = UPFDriver::Requests::RequestUnionUnion::UnPack(_e, request_type(), _resolver); }
}

inline ::flatbuffers::Offset<Request> Request::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _request_type = _o->request.type;
  auto _request = _o->request.Pack(_fbb);
  return UPFDriver::Requests::CreateRequest(
      _fbb,
      _request_type,
      _request);
}

inline TransactionT::TransactionT(const TransactionT &o)
      : transaction_id(o.transaction_id),
        deadline(o.deadline) {
  ops.reserve(o.ops.size());
  for (const auto &ops_ : o.ops) { ops.emplace_back((ops_) ? new UPFDriver::Requests::RequestT(*ops_) : nullptr); }
}

inline TransactionT &TransactionT::operator=(TransactionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(transaction_id, o.transaction_id);
  std::swap(deadline, o.deadline);
  std::swap(ops, o.ops);
  return *this;
}

inline TransactionT *Transaction::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TransactionT>(new TransactionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Transaction::UnPackTo(TransactionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = transaction_id(); _o->transaction_id = _e; }
  { auto _e = deadline(); _o->deadline = _e; }
  { auto _e = ops(); if (_e) { _o->ops.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->ops[_i]) { _e->Get(_i)->UnPackTo(_o->ops[_i].get(), _resolver); } else { _o->ops[_i] = std::unique_ptr<UPFDriver::Requests::RequestT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->ops.resize(0); } }
}

inline ::flatbuffers::Offset<Transaction> Transaction::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TransactionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTransaction(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Transaction> CreateTransaction(::flatbuffers::FlatBufferBuilder &_fbb, const TransactionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TransactionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _transaction_id = _o->transaction_id;
  auto _deadline = _o->deadline;
  auto _ops = _o->ops.size() ? _fbb.CreateVector<::flatbuffers::Offset<UPFDriver::Requests::Request>> (_o->ops.size(), [](size_t i, _VectorArgs *__va) { return CreateRequest(*__va->__fbb, __va->__o->ops[i].get(), __va->__rehasher); }, &_va ) : 0;
  return UPFDriver::Requests::CreateTransaction(
      _fbb,
      _transaction_id,
      _deadline,
      _ops);
}

inline bool VerifyRequestUnion(::flatbuffers::Verifier &verifier, const void *obj, RequestUnion type) {
  switch (type) {
    case RequestUnion_NONE: {
      return true;
    }
    case RequestUnion_DL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleInsertRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_DL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleUpdateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_DL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleRemoveRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_UL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleInsertRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_UL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleUpdateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_UL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleRemoveRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestUnion_InsertOrUpdatePerMaidURR: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::InsertOrUpdatePerMaidURR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestUnion(
        verifier,  values->Get(i), types->GetEnum<RequestUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline void *RequestUnionUnion::UnPack(const void *obj, RequestUnion type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case RequestUnion_DL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleInsertRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_DL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleUpdateRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_DL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleRemoveRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_UL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleInsertRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_UL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleUpdateRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_UL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleRemoveRequest *>(obj);
      return ptr->UnPack(resolver);
    }
    case RequestUnion_InsertOrUpdatePerMaidURR: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::InsertOrUpdatePerMaidURR *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> RequestUnionUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case RequestUnion_DL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleInsertRequestT *>(value);
      return CreateDL_N6_SimpleInsertRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_DL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *>(value);
      return CreateDL_N6_SimpleUpdateRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_DL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *>(value);
      return CreateDL_N6_SimpleRemoveRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_UL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleInsertRequestT *>(value);
      return CreateUL_N6_SimpleInsertRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_UL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *>(value);
      return CreateUL_N6_SimpleUpdateRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_UL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *>(value);
      return CreateUL_N6_SimpleRemoveRequest(_fbb, ptr, _rehasher).Union();
    }
    case RequestUnion_InsertOrUpdatePerMaidURR: {
      auto ptr = reinterpret_cast<const UPFDriver::Requests::InsertOrUpdatePerMaidURRT *>(value);
      return CreateInsertOrUpdatePerMaidURR(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline RequestUnionUnion::RequestUnionUnion(const RequestUnionUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case RequestUnion_DL_N6_SimpleInsertRequest: {
      value = new UPFDriver::Requests::DL_N6_SimpleInsertRequestT(*reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleInsertRequestT *>(u.value));
      break;
    }
    case RequestUnion_DL_N6_SimpleUpdateRequest: {
      value = new UPFDriver::Requests::DL_N6_SimpleUpdateRequestT(*reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *>(u.value));
      break;
    }
    case RequestUnion_DL_N6_SimpleRemoveRequest: {
      value = new UPFDriver::Requests::DL_N6_SimpleRemoveRequestT(*reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *>(u.value));
      break;
    }
    case RequestUnion_UL_N6_SimpleInsertRequest: {
      value = new UPFDriver::Requests::UL_N6_SimpleInsertRequestT(*reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleInsertRequestT *>(u.value));
      break;
    }
    case RequestUnion_UL_N6_SimpleUpdateRequest: {
      value = new UPFDriver::Requests::UL_N6_SimpleUpdateRequestT(*reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *>(u.value));
      break;
    }
    case RequestUnion_UL_N6_SimpleRemoveRequest: {
      value = new UPFDriver::Requests::UL_N6_SimpleRemoveRequestT(*reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *>(u.value));
      break;
    }
    case RequestUnion_InsertOrUpdatePerMaidURR: {
      value = new UPFDriver::Requests::InsertOrUpdatePerMaidURRT(*reinterpret_cast<UPFDriver::Requests::InsertOrUpdatePerMaidURRT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void RequestUnionUnion::Reset() {
  switch (type) {
    case RequestUnion_DL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleInsertRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_DL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleUpdateRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_DL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::DL_N6_SimpleRemoveRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_UL_N6_SimpleInsertRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleInsertRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_UL_N6_SimpleUpdateRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleUpdateRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_UL_N6_SimpleRemoveRequest: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::UL_N6_SimpleRemoveRequestT *>(value);
      delete ptr;
      break;
    }
    case RequestUnion_InsertOrUpdatePerMaidURR: {
      auto ptr = reinterpret_cast<UPFDriver::Requests::InsertOrUpdatePerMaidURRT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = RequestUnion_NONE;
}

inline const UPFDriver::Requests::Transaction *GetTransaction(const void *buf) {
  return ::flatbuffers::GetRoot<UPFDriver::Requests::Transaction>(buf);
}

inline const UPFDriver::Requests::Transaction *GetSizePrefixedTransaction(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<UPFDriver::Requests::Transaction>(buf);
}

inline bool VerifyTransactionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<UPFDriver::Requests::Transaction>(nullptr);
}

inline bool VerifySizePrefixedTransactionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<UPFDriver::Requests::Transaction>(nullptr);
}

inline void FinishTransactionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UPFDriver::Requests::Transaction> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransactionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UPFDriver::Requests::Transaction> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<UPFDriver::Requests::TransactionT> UnPackTransaction(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<UPFDriver::Requests::TransactionT>(GetTransaction(buf)->UnPack(res));
}

inline std::unique_ptr<UPFDriver::Requests::TransactionT> UnPackSizePrefixedTransaction(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<UPFDriver::Requests::TransactionT>(GetSizePrefixedTransaction(buf)->UnPack(res));
}

}  // namespace Requests
}  // namespace UPFDriver

#endif  // FLATBUFFERS_GENERATED_REQUESTS_UPFDRIVER_REQUESTS_H_
